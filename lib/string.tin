#nop VSoF;


/*
    String manipulation.
*/


#nop Return a string containing the %2 repeated %1 times.;
#function repchar {
    #format result %+%1s;
    #replace result { } %2;
}


#nop Return the length of a string.;
#function strlen {
    #format result {%L} {%0};
}


#nop Returns the length of the longest string.;
#function longestString {
    msg {DEBUG} {ALIAS: menu %0};

    #if {"%1" == "" } {
        msg {ERROR} {Usage: @longestString \{table\}};
    }
}

#FUNCTION {cut}
{
	#nop {Can cut with specified field and delimiter, defaults are space for the delimiter and 1 for field.};
	#variable {functionCut.fieldIndex} {1};
	#variable {functionCut.string} {%0};
	#regexp {${functionCut.string}} {{.*}-d {.} } {#variable {functionCut.delimiter} {&2};#replace {functionCut.string} {-d &2 }};
	#else
	{
		#variable {functionCut.delimiter} { }
	};
	#regexp {${functionCut.string}} {{.*}-f {\d+} } {#variable {functionCut.field} {&2};#replace {functionCut.string} {-f &2 }};
	#else
	{
		#variable {functionCut.field} {1}
	};
	#variable {result} {};
	#parse {${functionCut.string}} {character}
	{
		#if {"$character" == "${functionCut.delimiter}"}
		{
			#math {functionCut.fieldIndex} {${functionCut.fieldIndex} + 1}
		};
		#if {${functionCut.fieldIndex} == ${functionCut.field} && "${character}" != "${functionCut.delimiter}"}
		{
			#variable {result} {${result}${character}}
		}
	}
}
